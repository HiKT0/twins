local fs = require("filesystem")
local pkg = { ["/lib/twins/init.lua"]="local event = require(\"event\")\n\ntwins = {}\ntwins.container = require(\"component\").gpu\n\ntwins.scw, twins.sch = twins.container.getResolution()\n\ntwins.document = {}\ntwins.elements = {}\ntwins.focus = -1\n\ntwins.storage = {}\ntwins.sps = require(\"twins.base.sps\")\n\nfunction twins.wake()\n	twins.scw, twins.sch = twins.container.getResolution()\nend\n\nlocal function invoke(element, method, ...)\n	if type(element[method]) == \"function\" then\n		element[method](element, ...)\n	end\nend\n\nfunction twins.get_focus()\n	return twins.elements[twins.focus]\nend\n\nfunction twins.render(force)\n	for k, v in pairs(twins.elements) do\n		if rawget(v, \"changed\") or force then\n			invoke(v, \"render\")\n			rawset(v, \"changed\", false)\n		end\n	end\n	if twins.container.type == \"tornado_vs\" then\n		twins.draw_frame({x=1, y=1, w=twins.container.internal.width, h=twins.container.internal.height})\n	end\n	if twins.document.title then twins.title(twins.document.title) end\nend\n\n\nfunction twins.add_element(element)\n	for i=1, #twins.elements+1 do\n		if twins.elements[i] == nil then\n			element = setmetatable({\n				internal=element, \n				render=element.render,\n				getxywh = function(t)\n					return rawget(t.internal, \"x\"), rawget(t.internal, \"y\"), \n					rawget(t.internal, \"w\"), rawget(t.internal, \"h\")\n				end\n			}, {\n				__index = function(t, i)\n					rawset(t, \"changed\", true)\n					return rawget(t.internal, i)\n				end,\n				__newindex = function(t, i, v)\n					rawset(t, \"changed\", true)\n					rawset(t.internal, i, v)\n				end,\n				__pairs = function(t) return pairs(rawget(t, \"internal\")) end,\n				__ipairs = function(t) return ipairs(rawget(t, \"internal\")) end\n			})\n			twins.elements[i] = element\n			twins.elements[i]._id = i\n			twins.elements[i].visible = twins.elements[i].visible or true\n			invoke(twins.elements[i], \"oncreate\")\n			return twins.elements[i]\n		end\n	end\nend\n\nfunction twins.load_elements(module_name, load_as)\n	local mod, err = require(module_name)\n	twins[load_as] = {}\n	for elem_name, elem_content in pairs(mod) do\n		twins[load_as][elem_name] = \n		function(t)\n			t = t or {}\n			for k, v in pairs(elem_content) do\n				if not t[k] then t[k] = v end\n			end\n			return twins.add_element(t)\n		end\n	end\nend\n\nfunction twins.get_element_by_key(key)\n	for k, v in pairs(twins.elements) do\n		if v.key == key then\n			return v\n		end\n	end\nend\n\nfunction twins.draw_frame(elem)\n	twins.container.set(elem.x, elem.y, \"┌\")\n	twins.container.set(elem.x+elem.w-1, elem.y, \"┐\")\n	twins.container.set(elem.x, elem.y+elem.h-1, \"└\")\n	twins.container.set(elem.x+elem.w-1, elem.y+elem.h-1, \"┘\")\n\n	twins.container.fill(elem.x, elem.y+1, 1, elem.h-2, \"│\")\n	twins.container.fill(elem.x+elem.w-1, elem.y+1, 1, elem.h-2, \"│\")\n	twins.container.fill(elem.x+1, elem.y, elem.w-2, 1, \"─\")\n	twins.container.fill(elem.x+1, elem.y+elem.h-1, elem.w-2, 1, \"─\")\nend\n\nlocal function touch_listener(e_name, addr, x, y, button)\n	local offx, offy = 0, 0\n	if twins.container.type == \"tornado_vs\" then\n		offx = twins.container.internal.x\n		offy = twins.container.internal.y\n	end\n	for k, v in pairs(twins.elements) do\n		local ex, ey, ew, eh = v.getxywh(v)\n		if x-offx >= ex and x-offx < ex + ew and y-offy >= ey and y-offy < ey + eh then\n			if v.visible and twins.focus ~= k then\n				local foc_elem = twins.get_focus()\n				if foc_elem then\n					invoke(foc_elem, \"onfocus\", x-v.x, y-v.y)\n				end\n\n				twins.focus = k\n				invoke(twins.get_focus(), \"onfocusloss\")\n			end\n			invoke(v, \"onclick\", {x=x, y=y}, {x=x-v.x, y=y-v.y}, button)\n		end\n	end\nend\n\nlocal function key_down_listener(e_name, addr, letter, key)\n	local focus = twins.get_focus()\n	if focus then\n		if focus.visible then\n			invoke(focus, \"onkeydown\", letter, key)\n		end\n	end\nend\n\nlocal function scroll_listener(e_name, addr, x, y, size)\n	local offx, offy = 0, 0\n	if twins.container.type == \"tornado_vs\" then\n		offx = twins.container.internal.x\n		offy = twins.container.internal.y\n	end\n	for k, v in pairs(twins.elements) do\n		local ex, ey, ew, eh = v.getxywh(v)\n		if x-offx >= ex and x-offx < ex + ew and y-offy >= ey and y-offy < ey + eh then\n			invoke(v, \"onscroll\", {x=x, y=y}, {x=x-v.x, y=y-v.y}, size)\n		end\n	end\nend\n\n\nfunction twins.clear_screen(color)\n	twins.container.setForeground(twins.document.fgcolor or 0xffffff)\n	twins.container.setBackground(color or twins.document.bgcolor or 0x000000)\n	twins.container.fill(1, 1, twins.scw, twins.sch, \" \")\nend\n\ntwins.load_elements(\"twins.base.elem_base\", \"base\")\n\nfunction twins.clear_elements()\n	twins.elements = {}\nend\n\nfunction twins.title(title)\n	twins.container.set(3, 1, \"[\"..title..\"]\")\nend\n\nlocal function shutdown_sequence()\n	for k, v in pairs(twins.elements) do\n		invoke(v, \"ondestroy\")\n		twins.elements[k] = nil\n	end\nend\n\nlocal kdid, t_id, scr_id\n\nfunction twins.connect_listeners()\n	kdid = event.listen(\"key_down\", key_down_listener)\n	t_id = event.listen(\"touch\", touch_listener)\n	scr_id = event.listen(\"scroll\", scroll_listener)\nend\n\nfunction twins.disconnect_listeners()\n	event.cancel(kdid)\n	event.cancel(t_id)\n	event.cancel(scr_id)\nend\n\n\nfunction twins.main()\n	twins.connect_listeners()\n	local succ = xpcall(function()\n		twins.clear_screen()\n		while true do\n			twins.render()\n			os.sleep(60)\n		end\n	end, function(...) err = debug.traceback(...) end)\n	twins.disconnect_listeners()\n	shutdown_sequence()\n	if not succ then error(err) end\nend\n\nfunction twins.main_coroutine()\n	twins.running = true\n	twins.connect_listeners()\n	local succ, err = xpcall(function()\n		twins.clear_screen()\n		while twins.running do\n			twins.render()\n			coroutine.yield()\n		end\n	end, function(...) err = debug.traceback(...) end)\n	twins.disconnect_listeners()\n	twins.clear_screen(twins.document.destroy_color)\n	shutdown_sequence()\n	if not succ then error(err) end\nend\n\nreturn twins",["/lib/twins/base/elem_base.lua"]="local unicode = require \"unicode\"\nlocal event = require \"event\"\nlocal serialization = require \"serialization\"\nlocal elem_base = {\n	button = {\n		x = 1, y = 1,\n		w = 10, h = 3,\n		bgcolor = 0x222222,\n		fgcolor = 0xffffff,\n		text = \"button\",\n		render = function(v)\n			twins.container.setBackground(v.bgcolor)\n			twins.container.setForeground(v.fgcolor)\n			twins.container.fill(v.x, v.y, v.w, v.h, \" \")\n			twins.draw_frame(v)\n			twins.container.set(v.x+v.w/2-unicode.len(v.text)/2, v.y+v.h/2, v.text)\n			twins.container.setBackground(0x000000)\n		end\n	},\n	text = {\n		x = 1, y = 1,\n		w = 10, h = 1,\n		text = \"text\",\n		fgcolor = 0xffffff,\n		bgcolor = 0x000000,\n		render = function(v)\n			twins.container.setForeground(v.fgcolor)\n			twins.container.setBackground(v.bgcolor)\n			local text = unicode.sub(tostring(v.text), 1, v.w)\n			text = text .. string.rep(\" \", v.w-unicode.len(text))\n			twins.container.set(v.x, v.y, text)\n		end\n	},\n	checkbox = {\n		x = 1, y = 1,\n		w = 4, h = 3,\n		active_color = 0x00ff48,\n		active = false,\n		bgcolor = 0x000000,\n		render = function(v)\n			twins.container.setBackground(v.bgcolor)\n			twins.draw_frame(v)\n			if v.active then \n				twins.container.setBackground(v.active_color)\n			end\n			twins.container.set(v.x+1, v.y+1, \"  \")\n		end,\n		onclick = function(v)\n			v.active = not v.active\n			v.render(v)\n		end\n	},\n	input = {\n		x=1, y=1,\n		w=10, h=2,\n		bgcolor = 0x222222,\n		fgcolor = 0xffffff,\n		cursor = 1, view = 1,\n		blinker_t = \"not_init\",\n		blinker_state = 0,\n		allowed_chars = \"\",\n		text=\"\",\n		password=false,\n		render = function(v)\n			while v.cursor-v.view > v.w-1 do\n				v.view = v.view + 1\n			end\n			while v.cursor-v.view < 0 do\n				v.view = v.view - 1\n			end\n			if v.view < 1 then v.view = 1 end\n			twins.container.setBackground(v.bgcolor)\n			twins.container.setForeground(v.fgcolor)\n			twins.container.set(v.x, v.y+v.h-1, string.rep(\"─\", v.w))\n			local text = unicode.sub(tostring(v.text), v.view, v.view+v.w-1)\n\n			if v.password then\n				text = string.rep(\"*\", unicode.len(text))\n			end\n\n			text = text .. string.rep(\" \", v.w - unicode.len(text))\n			twins.container.set(v.x, v.y, text)\n		end,\n		draw_cursor = function(v)\n			v.blinker_state = (v.blinker_state + 1) % 2\n			local glob_cur_pos = v.cursor-v.view+v.x\n\n			if v.blinker_state == 0 then\n				local cur_char = twins.container.get(glob_cur_pos, v.y)\n				twins.container.setBackground(v.bgcolor)\n				twins.container.setForeground(v.fgcolor)\n				twins.container.set(glob_cur_pos, v.y, cur_char)\n			else\n				if twins.focus == v._id then\n					local cur_char = twins.container.get(glob_cur_pos, v.y)\n					twins.container.setBackground(v.fgcolor)\n					twins.container.setForeground(v.bgcolor)\n					twins.container.set(glob_cur_pos, v.y, cur_char)\n				end\n			end\n		end,\n		onclick = function(v)\n			if v.cursor > unicode.len(v.text) + 1 then\n				v.cursor = unicode.len(v.text) + 1\n			end\n			if v.cursor < 1 then\n				v.cursor = 1\n			end\n			v.draw_cursor(v) \n		end,\n		oncreate = function(v)\n			v.blinker_t = event.timer(0.5, \n				function()\n					v.draw_cursor(v)\n				end,\n				math.huge)\n		end,\n		ondestroy = function(v)\n			event.cancel(v.blinker_t)\n		end,\n		ovr_lets = {\n			[8] = \n			function(v, let, key)\n				v.text = unicode.sub(v.text, 1, v.cursor-2) .. unicode.sub(v.text, v.cursor, unicode.len(v.text))\n				v.cursor = v.cursor - 1\n				while v.cursor-v.view < 1 do\n					v.view = v.view - 1\n				end\n				v.render(v)\n			end,\n			[13] =\n			function(v, let, key)\n				if v.onconfirm then\n					v.onconfirm(v)\n				end\n			end\n		},\n		ovr_keys = {\n			[203] =\n			function(v, let, key)\n				v.cursor = v.cursor - 1\n				if v.cursor < 1 then\n					v.cursor = 1\n				end\n				v.render(v)\n			end,\n			[205] =\n			function(v, let, key)\n				v.cursor = v.cursor + 1\n				if v.cursor > unicode.len(v.text) + 1 then\n					v.cursor = unicode.len(v.text) + 1\n				end\n				v.render(v)\n			end\n		},\n		onmodify = function(v) end,\n		typechar = function(v, let, key)\n			v.text = (unicode.sub(v.text, 1, v.cursor-1) ..\n				unicode.char(let) .. \n				unicode.sub(v.text, v.cursor, unicode.len(v.text))\n				)\n			v.cursor = v.cursor + 1\n			v.render(v)\n\n			if v.onmodify then v.onmodify(v) end\n		end,\n		onkeydown = function(v, let, key)\n			if v.ovr_lets[let] then\n				v.ovr_lets[let](v, let, key)\n				if v.onmodify then v.onmodify(v) end\n			elseif v.ovr_keys[key] then\n				v.ovr_keys[key](v, let, key)\n				if v.onmodify then v.onmodify(v) end\n			else\n				if let > 31 then\n					if v.allowed_chars:len() == 0 or v.allowed_chars:find(string.char(let)) then\n						v.typechar(v, let, key)\n					end\n				end\n			end\n			if v.cursor < 1 then v.cursor = 1 end\n			v.blinker_state = 0\n			v.draw_cursor(v)\n		end\n	},\n	frame = {\n		x = 1, y = 1,\n		w = 10, h = 10,\n		bgcolor = 0x000000,\n		fgcolor = 0xffffff,\n		render = function(v)\n			twins.container.setBackground(v.bgcolor)\n			twins.container.setForeground(v.fgcolor)\n			twins.draw_frame(v)\n		end\n	},\n	list = {\n		x = 1, y = 1,\n		w = 10, h = 10,\n		bgcolor = 0x000000,\n		fgcolor = 0xffffff,\n		sel_color = 0x666666,\n		selection = -1,\n		items = {},\n		scroll_size = 3,\n		scroll = 0,\n		get_value = function(v) return v.items[v.selection] end,\n		render = function(v)\n			twins.container.setBackground(v.bgcolor)\n			twins.container.setForeground(v.fgcolor)\n			local line = 0\n			if v.scroll > 0 then\n				twins.container.set(v.x, v.y+line, \"...\"..(\" \"):rep(v.w-3))\n				line = line + 1\n			end\n			for k=v.scroll+1, #v.items do\n				local i = v.items[k]\n				local wspace = (\" \"):rep(v.w-unicode.len(i))\n				if v.selection-v.scroll == line+1 then\n					twins.container.setBackground(v.sel_color)\n					twins.container.set(v.x, v.y+line, tostring(i)..wspace)\n					twins.container.setBackground(v.bgcolor)\n				else\n					twins.container.set(v.x, v.y+line, tostring(i)..wspace)\n				end\n				line = line + 1\n				if line == v.h-1 then\n					twins.container.set(v.x, v.y+line, \"...\"..(\" \"):rep(v.w-3))\n					return\n				end\n			end\n			local wspace = (\" \"):rep(v.w)\n			for i=line, v.h-1 do\n				twins.container.set(v.x, v.y+i, wspace)\n			end\n		end,\n		onclick = function(v, pabs, prel, button)\n			if prel.y+v.scroll+1 <= #v.items+1 then\n				v.selection = prel.y+v.scroll+1\n				if v.onmodify then\n					v.onmodify(v)\n				end\n			end\n			v.render(v)\n		end,\n		onscroll = function(v, pabs, prel, size)\n			v.scroll = v.scroll - size*v.scroll_size\n			if v.scroll > #v.items-v.scroll_size then v.scroll = #v.items-v.scroll_size end\n			if v.scroll < 0 then v.scroll = 0 end\n			v.render(v)\n		end\n	}\n}\nreturn elem_base",["/lib/twins/base/sps.lua"]="local sps = {}\n\nfunction sps.center(e, mode)\n	local cx = (twins.scw-e.w)/2\n	local cy = (twins.sch-e.h)/2\n	if mode == 'x' then\n		e.x = cx\n	elseif mode == 'y' then\n		e.y = cy\n	else\n		e.x = cx\n		e.y = cy\n	end\n	return e, {x=cx, y=cy}\nend\n\nfunction sps.right(e)\n	local rx = twins.scw-e.w\n	e.x = rx\n	return e, rx\nend\n\nfunction sps.left(e)\n	local lx = 1\n	e.x = lx\n	return e, lx\nend\n\nfunction sps.up(e)\n	local uy = 1\n	e.y = uy\n	return e, uy\nend\n\nfunction sps.down(e)\n	local dy = twins.sch-e.h\n	e.y = dy\n	return e, dy\nend\n\nlocal function pos_list(list, dir, fun)\n	dir = dir or \"down\"\n	if dir == \"down\" then\n		local ly = 1\n		for k, e in pairs(list) do\n			fun(e)\n			e.y = ly\n			ly = ly + e.h\n		end\n	else\n		local ly = twins.sch\n		for k, e in pairs(list) do\n			ly = ly - e.h\n			fun(e)\n			e.y = ly\n		end\n	end\n	return list\nend\n\nfunction sps.right_list(list, dir)\n	pos_list(list, dir, sps.right)\nend\n\nfunction sps.left_list(list, dir)\n	pos_list(list, dir, sps.left)\nend\n\nfunction sps.position(attr, e)\n	for fun in attr:gmatch(\"[%w_]+\") do\n		if type(sps[fun]) == \"function\" then sps[fun](e) end\n	end\nend\n\nreturn sps"}

for k, v in pairs(pkg) do
    
    local dir = fs.path(k)
    if (not fs.isDirectory(dir)) or (not fs.exists(dir)) then
        print("Создание папки: "..dir)
        fs.makeDirectory(dir)
    end
    print("Распаковка: "..k)
    local f, e = io.open(k, "w")
    if not f then error(e) end
    f:write(v)
    f:flush()
    f:close()
end
