I. основной принцип твинов (можно не читать):
```
внутренним механизмам библиотеки все равно, какие объекты обрабатывать. элемент для библиотеки - все, что угодно, а для корректной работы библиотеки элемент может быть вообще пустой таблицей. сам элемент может иметь при себе вообще любые поля, и при имении того или иного поля, библиотека будет взаимодействовать с каждым по своему. например, для отрисовки элемента у него должен быть метод render; обычно методы элемента задаются его **классом** - значения элемента "по умолчанию". при создании элемента поля копируются из класса элемента, а если указаны - из предоставленной таблицы в аргумента функции. методы в большинстве своём существуют в качестве слушателей событий, то есть если библиотека достигает кода, где происходит какое-то важное действие, то вызывается соответствующий метод из элемента, с которым произошло взаимодействие. 

библиотека сама по себе даёт большую свободу разработчику, который её использует, поскольку даёт право указывать ЛЮБОЕ поведение ЛЮБОГО элемента самостоятельно, просто переопоеделив методы элемента, а также создавать свои собственные наборы элементов и поля в них (работать с элементом просто как с таблицей) 
```
II.1. минимально необходимый код (не создаёт никаких элементов, просто запускает главный цикл) 
```lua
local twins = require("twins")
twins.main()
```
II.2 код, который создаёт кнопку с функцией, которая вызывается при клике на нее
```lua
local twins = require("twins")
local computer = require("computer") 

twins.base.button({
    onclick = function() computer.beep(1000, 1) end
}) 

twins.main()
```
III. как загружаются элементы, что за base?
```
элементы обычно загружаются из другого файла, который загружается как функция через require и возвращает таблицу, где описаны классы всех элементов.
функция twins.load_elements(module_path, load_as) загружает классы элементов из файла, указанного первым аргументом, в поле библиотеки, указанное вторым аргументом. базовые элементы "из коробки" загружаются в twins.base, чтобы не засорять главную таблицу библиотеки и разграничить элементы по модификациям (разные авторы могут добавить разные элементы с одним именем, библиотека будет дружественно к этому относиться). однако библиотека будет стабильно работать и без загрузки базовых элементов.
```
IV. базовые элементы 
```
button (twins.base.button(table or nil)) 
text (gpu.set в современных реалиях) 
frame (красивая рамка как вокруг кнопки) 
switch (переключатель как в настройках телефона) 
checkbox (галочка) 
input (текстовый ввод) 
```
V. дополнительные фичи
```
1) для более удобной работы библиотека предоставляет так называемое хранилище состояний. это просто контейнер, который будет доступен из любого элемента и места, где виден текущий экземпляр twins. сам по себе хранилище состояний представляет из себя просто таблицу, которая помогает не запутаться в своих переменных и помогает автору настроить взаимодействие элементов между собой (при создании каких-то форм, где требуются данные с нескольких элементов)
доступ происходит через twins.storage

2) twins.get_element_by_key - функция, которая позволяет найти элемент в списке элементов на экране по "ключу", который прописывается в свойствах элемента

twins.main.input({key="value_input"})
local input = twins.get_element_by_key("value_input") -- вернет объект поля ввода, которое мы создали выше

ключом может быть любой тип данных (строка, число, таблица)
```
VI. доступные событийные методы, с которыми работает библиотека
```
onclick (element, local_x, local_y) - передает координаты нажатия на элементе
onkeydown (element, letter, key)
ondestroy - при удалении элемента
oncreate - при создании элемента (когда ему уже присвоено id и он в списке элементов)
render - устанавливает поведение, которое использует элемент при отрисовке
onfocus - при фокусировке на элемент (если пользователь переводит режим ввода на элемент, на который произошло нажатие)
onfocusloss - при потере фокуса
```
VII. обычно в графический элемент входят следующие поля:
```
render - функция, которая вызывается при отрисовке элемента и позволяет пользователю увидеть элемент.
x, y - числа, координаты левого верхнего угла элемента
w, h - ширина, высота
fgcolor, bgcolor - используются при отрисовке, цвет текста и фона соответственно
```